name: Build and Test

on:
  pull_request:
  push:
  merge_group:
  workflow_dispatch:

# Don't grant any access by default
permissions: {}

env:
  build-matrix: |
    images:
      - prefix: ''
        target: standard
      - prefix: 'slim-'
        target: slim
      - prefix: 'extra-'
        target: extra

jobs:
  set-build-matrix:
    name: "Set build matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          matrix=$(jq -c << EOF
          {
            "images": [
              {
                "prefix": "",
                "target": "standard"
              },
              {
                "prefix": "slim-",
                "target": "slim"
              },
              {
                "prefix": "extra-",
                "target": "extra"
              }
            ]
          }
          EOF
          )
          echo "matrix=${matrix}" >> ${GITHUB_OUTPUT}

  # Set build metadata before running any other job so we can reuse them for
  # both the standandard and the slim images, and for verification as well.
  # We can't run this as part of the build-container-image job because it
  # runs multiple times due to its matrix configuration, leading to race
  # conditions when verifying container image labels.
  set-build-metadata:
    name: Set build metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      BUILD_DATE: ${{ steps.set-build-metadata.outputs.BUILD_DATE }}
      BUILD_REVISION: ${{ steps.set-build-metadata.outputs.BUILD_REVISION }}
      BUILD_VERSION: ${{ steps.set-build-metadata.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Just
        run: |
          npm install -g just-install

      - name: Set build metadata
        id: set-build-metadata
        run: |
          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then
            BUILD_REVISION=${{ github.sha }}
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            BUILD_REVISION=${{ github.event.pull_request.head.sha }}
          else
            echo "[ERROR] Event not supported when setting build revision and build version"
            exit 1
          fi

          BUILD_DATE=`just get-build-date`
          BUILD_REVISION=`just get-build-revision`
          BUILD_VERSION=`just get-build-version`

          echo "Build date (GH Actions workflow): ${BUILD_DATE}"
          echo "Build revision (GH Actions workflow): ${BUILD_REVISION}"
          echo "Build version (GH Actions workflow): ${BUILD_VERSION}"

          {
            echo "BUILD_DATE=${BUILD_DATE}"
            echo "BUILD_REVISION=${BUILD_REVISION}"
            echo "BUILD_VERSION=${BUILD_VERSION}"
          } >> "${GITHUB_OUTPUT}"

  build-container-image:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs:
      - set-build-matrix
      - set-build-metadata
    concurrency:
      # Ref: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # github.head_ref: head_ref or source branch of the pull request
      # github.ref: ref of the branch that triggered the workflow
      group:
        ${{ github.workflow }}-${{ github.head_ref || github.ref }}-${{ github.event_name }}-${{ matrix.images.target }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-build-matrix.outputs.matrix) }} # Note: This must by synchronized with the matrix in the test-local-action job
        # images:
        #   - prefix: ''
        #     target: standard
        #   - prefix: 'slim-'
        #     target: slim
        #   - prefix: 'extra-'
        #     target: extra
    timeout-minutes: 60
    env:
      CONTAINER_IMAGE_ID:
        'ghcr.io/ellenfieldn/container-toolkit-action-nodist:${{ matrix.images.prefix }}latest'
      CONTAINER_IMAGE_TARGET: '${{ matrix.images.target }}'
      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME:
        'container-toolkit-action-nodist-${{ matrix.images.prefix }}latest'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Just
        run: |
          npm install -g just-install

      - name: Free Disk space
        shell: bash
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            BUILD_DATE=${{ needs.set-build-metadata.outputs.BUILD_DATE }}
            BUILD_REVISION=${{ needs.set-build-metadata.outputs.BUILD_REVISION }}
            BUILD_VERSION=${{ needs.set-build-metadata.outputs.BUILD_VERSION }}
          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache
          outputs:
            type=docker,dest=/tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME}}.tar
          push: false
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ${{ env.CONTAINER_IMAGE_ID }}
          target: '${{ matrix.images.target }}'

      - name:
          Upload ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}
          path: /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar

  test-local-action:
    name: Test the Local GitHub Action
    runs-on: ubuntu-latest
    needs:
      - set-build-metadata
      - build-container-image
    permissions:
      contents: read
    strategy:
      matrix: ${{ fromJSON(needs.set-build-matrix.outputs.matrix) }} # Note: This must by synchronized with the matrix in the build-container-image job
        # images:
        #   - container-image-id: container-toolkit-action-nodist-latest
        #     prefix: ''
        #     target: standard
        #   - container-image-id: container-toolkit-action-nodist-slim-latest
        #     prefix: slim-
        #     target: slim
        #   - container-image-id: container-toolkit-action-nodist-extra-latest
        #     prefix: extra-
        #     target: extra
    env:
      CONTAINER_IMAGE_ID:
        'ghcr.io/ellenfieldn/container-toolkit-action-nodist:${{ matrix.images.prefix }}latest'
      CONTAINER_IMAGE_TARGET: '${{ matrix.images.target }}'
      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME:
        'container-toolkit-action-nodist-${{ matrix.images.prefix }}latest'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Just
        run: |
          npm install -g rust-just

      - name: Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}
          path: /tmp

      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image
        run: |
          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar
          docker image ls -a

      - name: Update action.yml
        run: |
          echo "yq version: $(yq --version)"
          yq '.runs.image = "docker://" + env(CONTAINER_IMAGE_ID)' -i action.yml
          echo "Action file contents:"
          cat action.yml

      - name: Test Local Action
        uses: ./
        env:
          INPUT_MILLISECONDS: 1000

  run-tests:
    name: Run test cases
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs:
      - set-build-matrix
      - set-build-metadata
      - build-container-image
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-build-matrix.outputs.matrix) }}
        # images:
        #   - container-image-id: container-toolkit-action-nodist-latest
        #     prefix: ''
        #     target: standard
        #   - container-image-id: container-toolkit-action-nodist-slim-latest
        #     prefix: slim-
        #     target: slim
        #   - container-image-id: container-toolkit-action-nodist-extra-latest
        #     prefix: extra-
        #     target: extra
    env:
      CONTAINER_IMAGE_ID:
        'ghcr.io/ellenfieldn/container-toolkit-action-nodist:${{ matrix.images.prefix }}latest'
      CONTAINER_IMAGE_TARGET: '${{ matrix.images.target }}'
      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME:
        'container-toolkit-action-nodist-${{ matrix.images.prefix }}latest'
      BUILD_DATE:
        ${{ needs.set-build-metadata.outputs.BUILD_DATE }}
      BUILD_REVISION:
        ${{ needs.set-build-metadata.outputs.BUILD_REVISION }}
      BUILD_VERSION:
        ${{ needs.set-build-metadata.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Just
        run: |
          npm install -g just-install

      - name:
          Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}
          path: /tmp

      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image
        run: |
          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar
          docker image ls -a

      - name: 'Tests for: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}'
        run: just test

  # The purpose of this job is to run only when the run-test-suite job runs to completion.
  # We can use this job as a required status check in a branch protection rule without
  # having to select each individual job that dynamically add to the test matrix.
  test-success-placeholder:
    name: Check if all the tests passed
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs:
      - run-tests
      - test-local-action
    steps:
      - name: Test suite success
        if:
          ${{ !(contains(needs.*.result, 'failure')) && !contains(needs.*.result, 'cancelled') && !contains(needs.*.result, 'skipped') }}
        run: exit 0
      - name: Test suite failures
        if:
          ${{ contains(needs.*.result, 'failure') || contains(needs.*.result,
          'cancelled') || contains(needs.*.result, 'skipped') }}
        run: exit 1
